// 928. Minimize Malware Spread II
// You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.
// Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.
// Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops.
// We will remove exactly one node from initial, completely removing it and any connections from this node to any other node.
// Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.


// Solution: Union Find

// The idea is to connect all the good (non-infected) nodes and work out how many bad nodes are connected to each group.
// For each bad node, count the number of good nodes that are only directly connected to one bad node.

// key words: 
  // good node = non-infected node
  // good group = group of non-infected nodes
  // bad node = infected node
  // isolated good nodes = nodes that are only directly connected to one infected node

// 1. Get and connect the good nodes using union find.
// 2. Get the number of bad nodes connected to each good group.
  // To achieve this, we must get the unique bad nodes connected to each group.
// 3. For each bad node, count the number of good nodes that are only affected by that one bad node.
  // Note that these good nodes can come from multiple different groups.
  // Get the bad node with the most number of good nodes that are only affected by that one bad node.

// Time Complexity: O(n^2) 180ms
// Space Complexity: O(n^2) 53.2MB
var minMalwareSpread = function(graph, initial) {
  // connect the good nodes
  let n = graph.length, uf = new UnionFind(n);
  let goodNodes = [], initialSet = new Set(initial);
  for (let i = 0; i < n; i++) {
    if (!initialSet.has(i)) goodNodes.push(i);
  }
  for (let i of goodNodes) {
    for (let j = 0; j < n; j++) {
      if (initialSet.has(j)) continue;
      if (graph[i][j]) uf.union(i, j);
    }
  }

  // get the number of nodes in each group
  let groupCount = Array(n).fill(0);
  for (let i = 0; i < n; i++) {
    if (initialSet.has(i)) continue;
    let parent = uf.find(i);
    groupCount[parent]++;
  }
  
  // get number of bad nodes connected to each good group
  // to achieve this, we must get the unique bad nodes connected to each group.
  let infectedCount = Array(n).fill(0); // infectedCount[i] = number of infected nodes connected to group i
  let infectedConnections = Array(n).fill(0).map(() => new Set()); // sets of bad nodes directly connected to each group
  for (let goodNode of goodNodes) {
    for (let badNode = 0; badNode < n; badNode++) {
      if (graph[goodNode][badNode] && initialSet.has(badNode)) {
        let parent = uf.find(goodNode);
        infectedConnections[parent].add(badNode);
        infectedCount[parent] = infectedConnections[parent].size;
      }
    }
  }
  
  // get the bad node with the most number of isolated good nodes.
  let maxCount = 0, res = Math.min(...initial);
  for (let badNode of initial) {
    let goodGroups = new Set();
    for (let i = 0; i < n; i++) {
      let parent = uf.find(i);
      if (graph[badNode][i] && !initialSet.has(i) && infectedCount[parent] === 1) {
        goodGroups.add(parent);
      }
    }
    let goodNodesCount = 0;
    for (let group of goodGroups) {
      goodNodesCount += groupCount[group];
    }
    if (goodNodesCount > maxCount || (goodNodesCount === maxCount && badNode < res)) {
      maxCount = goodNodesCount;
      res = badNode;
    }
  }
  return res;
};

class UnionFind {
  constructor(size) {
    this.rank = Array(size);
    this.root = Array(size);
    for (let i = 0; i < size; i++) {
      this.rank[i] = 1;
      this.root[i] = i;
    }
  }
  find(x) {
    if (this.root[x] === x) return x;
    return this.root[x] = this.find(this.root[x]);
  }
  union(x, y) {
    let rootX = this.find(x), rootY = this.find(y);
    if (rootX === rootY) return false;
    if (this.rank[rootX] < this.rank[rootY]) this.root[rootX] = rootY;
    else if (this.rank[rootX] > this.rank[rootY]) this.root[rootY] = rootX;
    else {
      this.root[rootY] = rootX;
      this.rank[rootX]++;
    }
    return true;
  }
  isConnected(x, y) {
    return this.find(x) === this.find(y);
  }
}

// Three test cases to run function on
console.log(minMalwareSpread([[1,1,0],[1,1,0],[0,0,1]], [0,1])) // 0
console.log(minMalwareSpread([[1,1,0],[1,1,1],[0,1,1]], [0,1])) // 1
console.log(minMalwareSpread([[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], [0,1])) // 1