// 1332. Remove Palindromic Subsequences
// You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
// Return the minimum number of steps to make the given string empty.
// A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.
// A string is called palindrome if is one that reads the same backward as well as forward.


// Solution: Greedy Logic

// There are only two possible cases:
  // 1. s is already a palindrome, we only need 1 move.
  // 2. s is not a palindrome, in which case we can remove all the a's and then all the b's in 2 moves.

// Time Complexity: O(n) 72ms
// Space Complexity: O(1) 42.1MB
var removePalindromeSub = function(s) {
  if (isPalindrome(s)) return 1;
  return 2;
  
  function isPalindrome(str) {
    let start = 0, end = str.length - 1;
    while (start < end) {
      if (str[start] !== str[end]) return false;
      start++, end--;
    }
    return true;
  }
};

// Three test cases 
console.log(removePalindromeSub("ababa")) // 1
console.log(removePalindromeSub("abb")) // 2
console.log(removePalindromeSub("baabb")) // 2