// 2875. Minimum Size Subarray in Infinite Array
// You are given a 0-indexed array nums and an integer target.
// A 0-indexed array infinite_nums is generated by infinitely appending the elements of nums to itself.
// Return the length of the shortest subarray of the array infinite_nums with a sum equal to target. If there is no such subarray return -1.


// Solution: Prefix Sum & Hashmap

// We can take Math.floor(target / totalSum) whole instances of nums. These can be rotated versions of nums.

// Find the subarrays on the left or right of the whole instances of nums. 
// This represents a segment of nums, and the leftover of the target (target % sum of nums) should be equal to the sum of the subarray.

// Use prefix sum and a hashmap to find these subarrays and record the minimum array length.

// e.g: [1,2,3,4], target = 15.
  // totalSum = 10, leftover = 15 % 10 = 5: we need to find a subarray with sum of 5
  // Two repetitions: [1,2,3,4,1,2,3,4]
  // Subarray:           ___
  // Rotated instance:       _______

// Time Complexity: O(n) 140ms
// Space Complexity: O(n) 90.9MB
var minSizeSubarray = function(nums, target) {
  let totalSum = nums.reduce((sum, num) => sum + num);
  let n = nums.length;
  let fullRepeats = Math.floor(target / totalSum);
  let baseLen = fullRepeats * n;
  target %= totalSum;

  let pSum = 0, map = new Map(), ans = target === 0 ? baseLen : Infinity;
  map.set(0, -1);
  for (let i = 0; i < n * 2; i++) {
    pSum += nums[i % n];
    if (map.has(pSum - target)) {
      let extraLen = i - map.get(pSum - target);
      ans = Math.min(ans, baseLen + extraLen);
    }
    map.set(pSum, i);
  }
  return ans === Infinity ? -1 : ans;
};

// Two test cases
console.log(minSizeSubarray([1,2,3], 5)) // 2
console.log(minSizeSubarray([1,1,1,2,3], 4)) // 2